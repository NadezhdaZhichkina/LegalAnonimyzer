import re
import pdfplumber
from docx import Document
from docx.shared import Pt
from docx.oxml.ns import qn
import streamlit as st
from io import BytesIO

# === –ú–∞—Å–∫–∏—Ä–æ–≤–∫–∞ ===
def remove_sensitive_data(text):
    text = text.replace('\t', ' ').replace('\n', ' ')

    patterns = [
        r'/[–ê-–Ø–Å][–∞-—è—ë]+ [–ê-–Ø–Å]\.[–ê-–Ø–Å]\./',  # /–§–∞–º–∏–ª–∏—è –ò.–û./
        r'\b[–ê-–Ø–Å][–∞-—è—ë]+[\s]+[–ê-–Ø–Å][–∞-—è—ë]+[\s]+[–ê-–Ø–Å][–∞-—è—ë]+\b',  # –§–ò–û —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
        r'\b[–ê-–Ø–Å][–∞-—è—ë]+ [–ê-–Ø–Å]\.[–ê-–Ø–Å]\.\b',  # –§–∞–º–∏–ª–∏—è –ò.–û.
        r'\b[–ê-–Ø–Å]\.[–ê-–Ø–Å]\. ?[–ê-–Ø–Å][–∞-—è—ë]+\b',  # –ò.–û. –§–∞–º–∏–ª–∏—è
        r'\b–ò–ù–ù ?\d{10,12}\b',
        r'\b–û–ì–†–ù ?\d{13}\b',
        r'\b–ö–ü–ü ?\d{9}\b',
        r'\b\d{2} \d{2} \d{6}\b',
        r'\b\d{3}-\d{3}-\d{3} \d{2}\b',
        r'\b\d{2}\.\d{2}\.\d{4}\b',
        r'\b[\w\.-]+@[\w\.-]+\.\w+\b',
        r'(?:(?:8|\+7)[\s\-]?)?\(?\d{3,4}\)?[\s\-]?\d{2,3}[\s\-]?\d{2}[\s\-]?\d{2,4}',
        r'https?://[^\s,]+',
        r'\b[\w\.-]+\.(ru|com|pdf|org|net)\b',
        r'(?i)(—é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π|–ø–æ—á—Ç–æ–≤—ã–π)?\s*–∞–¥—Ä–µ—Å\s*[:\-\u2013\u2014]?\s*[^\n\r]*',
        r'(?i)–º–µ—Å—Ç–æ–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ\s*[:\-\u2013\u2014]?\s*[^\n\r]*',
        r'\b\d{6},?\s*–≥–æ—Ä–æ–¥\s+[–ê-–Ø–Å–∞-—è—ë\s]+,?\s*[^,\n\r]{0,100}–¥[–æ–º]*\.?\s*\d+[^,\n\r]*',
        r'(?i)(—Ä–∞—Å—á–µ—Ç–Ω—ã–π —Å—á–µ—Ç|—Ä/—Å|–∫/—Å|–∫–æ—Ä/—Å|–∫–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç—Å–∫–∏–π —Å—á–µ—Ç)[^\n\r]*',
        r'\b(–û–û–û|–ê–û|–ü–ê–û|–û–ê–û|–ó–ê–û|–ò–ü|–¢–°–ñ|–ú–£–ü|–ì–£–ü|–ù–ö–û|–ú–ö–ê|–°–ù–¢|–ü–ö|–ö–§–•)\s*[¬´‚Äû‚Äú"‚Äü‚Äù][^¬´¬ª‚Äû‚Äú"‚Äü‚Äù]*[¬ª‚Äù"]',
        r'\b(–ü–£–ë–õ–ò–ß–ù–û–ï\s+|–ù–ï–ü–£–ë–õ–ò–ß–ù–û–ï\s+)?–ê–ö–¶–ò–û–ù–ï–†–ù–û–ï\s+–û–ë–©–ï–°–¢–í–û\s+[¬´"‚Äû‚Äú‚Äü‚Äù][^¬ª"‚Äú‚Äù]+[¬ª"‚Äú‚Äù][^,)]*',
        r'\b(–ü–£–ë–õ–ò–ß–ù–û–ï\s+–ê–ö–¶–ò–û–ù–ï–†–ù–û–ï\s+–û–ë–©–ï–°–¢–í–û|–ê–ö–¶–ò–û–ù–ï–†–ù–û–ï\s+–û–ë–©–ï–°–¢–í–û|–û–ë–©–ï–°–¢–í–û\s+–°\s+–û–ì–†–ê–ù–ò–ß–ï–ù–ù–û–ô\s+–û–¢–í–ï–¢–°–¢–í–ï–ù–ù–û–°–¢–¨–Æ)\s+["¬´‚Äû‚Äú‚Äü‚Äù][^"¬ª‚Äú‚Äù]+["¬ª‚Äú‚Äù]',
        r'\b–≥\.?\s*–ú–æ—Å–∫–≤–∞\b[^\n\r]{0,100}–¥\.?\s*\d+[^\n\r]*',
        r'\b–ú–æ—Å–∫–≤–∞\b[^\n\r]{0,100}–¥\.?\s*\d+[^\n\r]*',
        r'(?i)\b–Ω–µ–ø—É–±–ª–∏—á–Ω–æ–µ\s+–∞–∫—Ü–∏–æ–Ω–µ—Ä–Ω–æ–µ\s+–æ–±—â–µ—Å—Ç–≤–æ\s+[¬´"‚Äû‚Äú‚Äü‚Äù][^¬´¬ª"‚Äú‚Äù]+[¬ª"‚Äú‚Äù]',
        r'(?i)\b(–ø—É–±–ª–∏—á–Ω–æ–µ\s+|–Ω–µ–ø—É–±–ª–∏—á–Ω–æ–µ\s+)?–∞–∫—Ü–∏–æ–Ω–µ—Ä–Ω–æ–µ\s+–æ–±—â–µ—Å—Ç–≤–æ\s+¬´(?:[^¬´¬ª]*¬´[^¬´¬ª]*¬ª[^¬´¬ª]*)+¬ª[^\n\r,)]*',
        r'\b(–ü–£–ë–õ–ò–ß–ù–û–ï\s+|–ù–ï–ü–£–ë–õ–ò–ß–ù–û–ï\s+)?–ê–ö–¶–ò–û–ù–ï–†–ù–û–ï\s+–û–ë–©–ï–°–¢–í–û\s+[¬´"‚Äû‚Äú‚Äü‚Äù][^¬ª"‚Äú‚Äù\n\r]+(?:[¬´"‚Äû‚Äú‚Äü‚Äù][^¬ª"‚Äú‚Äù\n\r]+[¬ª"‚Äú‚Äù])?[^,;\n\r]*',
        r'\b(–ê–û|–ü–ê–û|–û–ê–û|–ó–ê–û)\s+(–°–ö|–ë–ê–ù–ö|–ö–û–ú–ü–ê–ù–ò–Ø)?\s*[¬´"‚Äû‚Äú‚Äü‚Äù][^¬ª"‚Äú‚Äù\n\r]+(?:[¬´"‚Äû‚Äú‚Äü‚Äù][^¬ª"‚Äú‚Äù\n\r]+[¬ª"‚Äú‚Äù])?[^,;\n\r]*',


    ]

    replacements = {}
    for i, pattern in enumerate(patterns):
        def repl(match):
            key = f"[–£–î–ê–õ–ï–ù–û_{i}_{len(replacements)}]"
            replacements[key] = match.group()
            return key
        text = re.sub(pattern, repl, text)
    return text, replacements

def restore_sensitive_data(text, replacements):
    for key, original in replacements.items():
        text = text.replace(key, original)
    return text

def set_font(paragraph):
    for run in paragraph.runs:
        run.font.name = 'Arial'
        run._element.rPr.rFonts.set(qn('w:eastAsia'), 'Arial')
        run.font.size = Pt(11)

# === DOCX –æ–±—Ä–∞–±–æ—Ç–∫–∞ ===
def sanitize_docx(file_bytes):
    file_bytes.seek(0)
    doc = Document(BytesIO(file_bytes.read()))
    full_replacements = {}
    for para in doc.paragraphs:
        new_text, replacements = remove_sensitive_data(para.text)
        para.text = new_text
        set_font(para)
        full_replacements.update(replacements)
    for table in doc.tables:
        for row in table.rows:
            for cell in row.cells:
                new_text, replacements = remove_sensitive_data(cell.text)
                cell.text = new_text
                for p in cell.paragraphs:
                    set_font(p)
                full_replacements.update(replacements)
    buffer = BytesIO()
    doc.save(buffer)
    buffer.seek(0)
    return buffer, full_replacements

def restore_docx(file_bytes, replacements):
    file_bytes.seek(0)
    doc = Document(BytesIO(file_bytes.read()))
    for para in doc.paragraphs:
        para.text = restore_sensitive_data(para.text, replacements)
        set_font(para)
    for table in doc.tables:
        for row in table.rows:
            for cell in row.cells:
                cell.text = restore_sensitive_data(cell.text, replacements)
                for p in cell.paragraphs:
                    set_font(p)
    buffer = BytesIO()
    doc.save(buffer)
    buffer.seek(0)
    return buffer

# === PDF ‚Üí DOCX —á–µ—Ä–µ–∑ pdfplumber ===
def convert_pdfplumber_to_docx(file_bytes):
    file_bytes.seek(0)
    doc = Document()
    full_replacements = {}

    with pdfplumber.open(file_bytes) as pdf:
        for page in pdf.pages:
            # –¢–µ–∫—Å—Ç
            text = page.extract_text()
            if text:
                for line in text.split("\n"):
                    clean_text, replacements = remove_sensitive_data(line)
                    para = doc.add_paragraph(clean_text)
                    set_font(para)
                    full_replacements.update(replacements)

            # –¢–∞–±–ª–∏—Ü—ã
            for table in page.extract_tables():
                doc_table = doc.add_table(rows=0, cols=len(table[0]))
                for row_data in table:
                    row = doc_table.add_row().cells
                    for i, cell in enumerate(row_data):
                        clean_text, replacements = remove_sensitive_data(cell or "")
                        row[i].text = clean_text
                        full_replacements.update(replacements)

    buffer = BytesIO()
    doc.save(buffer)
    buffer.seek(0)
    return buffer, full_replacements

# === –ö–∞—Ä—Ç–∞ –∑–∞–º–µ–Ω ===
def export_replacements(replacements):
    rep_text = "\n".join(f"{k} ‚Üí {v}" for k, v in replacements.items())
    buffer = BytesIO()
    buffer.write(rep_text.encode("utf-8"))
    buffer.seek(0)
    return buffer

def import_replacements(text_file):
    content = text_file.read().decode("utf-8")
    replacements = {}
    for line in content.strip().splitlines():
        if "‚Üí" in line:
            key, val = line.split("‚Üí", 1)
            replacements[key.strip()] = val.strip()
    return replacements

# === –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit ===
st.set_page_config(page_title="AsiwiAnonymizer", page_icon="üìÑ")
st.title("AsiwiAnonymizer ‚Äî –û–±–µ–∑–ª–∏—á–∏–≤–∞–Ω–∏–µ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ .docx –∏ .pdf")

tab1, tab2 = st.tabs(["üîí –û–±–µ–∑–ª–∏—á–∏—Ç—å", "‚ôªÔ∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"])

with tab1:
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª .docx –∏–ª–∏ .pdf", type=["docx", "pdf"])
    if uploaded_file and st.button("–û–±–µ–∑–ª–∏—á–∏—Ç—å"):
        filetype = uploaded_file.name.split(".")[-1].lower()
        if filetype == "docx":
            output, replacements = sanitize_docx(uploaded_file)
            filename = "–æ–±–µ–∑–ª–∏—á–µ–Ω–Ω—ã–π.docx"
        elif filetype == "pdf":
            output, replacements = convert_pdfplumber_to_docx(uploaded_file)
            filename = "–æ–±–µ–∑–ª–∏—á–µ–Ω–Ω—ã–π.docx"
        else:
            st.error("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç.")
            st.stop()

        st.download_button("üìÅ –°–∫–∞—á–∞—Ç—å –æ–±–µ–∑–ª–∏—á–µ–Ω–Ω—ã–π —Ñ–∞–π–ª", data=output, file_name=filename)
        if replacements:
            rep_file = export_replacements(replacements)
            st.download_button("üóÇÔ∏è –°–∫–∞—á–∞—Ç—å –∫–∞—Ä—Ç—É –∑–∞–º–µ–Ω (.txt)", data=rep_file, file_name="–∫–∞—Ä—Ç–∞_–∑–∞–º–µ–Ω.txt")

with tab2:
    file_docx = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–π –æ–±–µ–∑–ª–∏—á–µ–Ω–Ω—ã–π .docx", type=["docx"], key="restore_docx")
    file_map = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–∞—Ä—Ç—É –∑–∞–º–µ–Ω (.txt)", type=["txt"], key="restore_map")
    if file_docx and file_map and st.button("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"):
        replacements = import_replacements(file_map)
        restored_doc = restore_docx(file_docx, replacements)
        st.download_button("üìÑ –°–∫–∞—á–∞—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π .docx", data=restored_doc, file_name="–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π.docx")
